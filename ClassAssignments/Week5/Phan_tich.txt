Để làm rõ cách tính toán của (2 + 1)D convolution và 3D convolution, tôi sẽ giải thích chi tiết hơn về từng loại convolution với ví dụ cụ thể.

(2 + 1)D Convolution Như đã giải thích ở trên, (2 + 1)D convolution là sự kết hợp của 2D convolution (xử lý không gian) và 1D convolution (xử lý thời gian). Cách tính toán này sẽ giảm thiểu chi phí tính toán khi làm việc với video hoặc các chuỗi dữ liệu mà có thông tin không gian (2D) và thời gian (1D).
Cách tính toán: Giả sử bạn có một video hoặc chuỗi ảnh gồm các T frame (hoặc các hình ảnh liên tiếp), mỗi frame có kích thước là H x W (chiều cao và chiều rộng). Bạn có một kernel K_space cho không gian 2D và một kernel K_time cho chiều thời gian (hoặc chiều thứ ba).

Quy trình: 2D Convolution trên mỗi frame:

Mỗi frame của video (hoặc mỗi ảnh) sẽ được xử lý bằng phép toán 2D convolution. Trong phép toán này, kernel sẽ trượt qua các điểm trong không gian 2D của mỗi frame. Kernel K_space có kích thước k_h x k_w, với k_h là chiều cao của kernel và k_w là chiều rộng của kernel. Ví dụ, giả sử bạn có một frame 5x5 (H=5, W=5) và một kernel 3x3. Khi thực hiện 2D convolution, kernel sẽ trượt qua từng vị trí trong frame và tính toán tổng tích phân của các giá trị pixel và các trọng số của kernel. 1D Convolution trên thời gian (hoặc chiều thứ ba):

Sau khi xử lý không gian (2D), bạn sẽ áp dụng 1D convolution dọc theo chiều thời gian (hoặc chiều thứ ba nếu dữ liệu là 3D). Điều này có thể coi là trượt một kernel K_time qua các frame của video để lấy thông tin từ các frame liên tiếp. Kernel K_time có kích thước k_t (kích thước chiều thời gian). Khi thực hiện 1D convolution, bạn sẽ sử dụng kernel này để kết hợp thông tin từ các frame gần nhau theo thời gian. Ví dụ: Giả sử bạn có một video gồm 3 frame (T = 3) với kích thước 5x5 cho mỗi frame.

Kích thước frame: 5 x 5 (H = 5, W = 5) Số frame: T = 3 Kernel không gian (K_space) kích thước 3x3. Kernel thời gian (K_time) kích thước 3 (cho 3 frame). Bước 1: 2D Convolution (Không gian) Áp dụng kernel K_space (3x3) vào từng frame 5x5 của video, cho mỗi frame bạn sẽ có một phép toán 2D convolution. Sau khi trượt kernel qua toàn bộ frame, bạn sẽ có một kết quả mới, ví dụ là một frame 3x3 (vì kích thước kernel là 3x3, nên kích thước của frame sau convolution sẽ giảm xuống).

Bước 2: 1D Convolution (Thời gian) Sau khi xử lý không gian cho mỗi frame, bạn sẽ áp dụng 1D convolution dọc theo thời gian với kernel K_time có kích thước 3. Điều này có nghĩa là bạn sẽ trượt kernel qua các frame (T = 3) và kết hợp thông tin từ ba frame để tạo ra một đầu ra mới.

Giả sử video của bạn là:

𝐹 𝑟 𝑎 𝑚 𝑒 1 = [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ] Frame 1​=​

1 6 11 16 21​

2 7 12 17 22​

3 8 13 18 23​

4 9 14 19 24​

5 10 15 20 25​

​

𝐹 𝑟 𝑎 𝑚 𝑒 2 = [ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ] Frame 2​=​

5 10 15 20 25​

6 11 16 21 26​

7 12 17 22 27​

8 13 18 23 28​

9 14 19 24 29​

​

𝐹 𝑟 𝑎 𝑚 𝑒 3 = [ 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ] Frame 3​=​

10 15 20 25 30​

11 16 21 26 31​

12 17 22 27 32​

13 18 23 28 33​

14 19 24 29 34​

​

Giả sử kernel không gian K_space là:

𝐾 _ 𝑠 𝑝 𝑎 𝑐 𝑒 = [ 1 1 1 1 1 1 1 1 1 ] K_space=​

1 1 1​

1 1 1​

1 1 1​

​

Và kernel thời gian K_time là: [1, 0, -1].

Sau khi áp dụng 2D convolution lên mỗi frame, bạn sẽ có một frame đã được xử lý không gian (ví dụ, mỗi frame 3x3). Sau đó, bạn áp dụng 1D convolution với kernel K_time lên các frame này.

Bước 3: Đầu ra cuối cùng Kết quả cuối cùng là sự kết hợp giữa cả không gian (2D) và thời gian (1D), giúp mô hình có thể học được các đặc trưng của cả không gian và thời gian.

3D Convolution Định nghĩa: 3D convolution là phép toán convolution thực hiện trên dữ liệu ba chiều, chẳng hạn như video (với 2 chiều không gian và 1 chiều thời gian) hoặc hình ảnh 3D (chẳng hạn như hình ảnh y tế).
Cách tính toán: Giả sử bạn có một video với 3 frame (T = 3) và mỗi frame có kích thước 5x5 (H = 5, W = 5). Bạn cũng có một kernel 3D với kích thước 3x3x3.

Quy trình: Kernel 3D (K) có kích thước 3x3x3, nghĩa là nó có chiều cao 3, chiều rộng 3 và độ sâu 3 (tương ứng với 3 frame). Dữ liệu 3D: Dữ liệu video của bạn sẽ có kích thước 3 x 5 x 5 (T x H x W). Convolution: Kernel 3D sẽ trượt qua toàn bộ không gian 3D của video, kết hợp thông tin không gian và thời gian đồng thời. Ví dụ: Giả sử video có 3 frame, mỗi frame là 5x5, kernel 3D là 3x3x3:

Video (3x5x5): 𝐹 𝑟 𝑎 𝑚 𝑒 1 = [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ] Frame 1​=​

1 6 11 16 21​

2 7 12 17 22​

3 8 13 18 23​

4 9 14 19 24​

5 10 15 20 25​

​

𝐹 𝑟 𝑎 𝑚 𝑒 2 = [ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ] Frame 2​=​

5 10 15 20 25​

6 11 16 21 26​

7 12 17 22 27​

8 13 18 23 28​

9 14 19 24 29​

​

𝐹 𝑟 𝑎 𝑚 𝑒 3 = [ 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ] Frame 3​=​

10 15 20 25 30​

11 16 21 26 31​

12 17 22 27 32​

13 18 23 28 33​

14 19 24 29 34​

​

Kernel 3D: Một kernel 3D có kích thước 3x3x3 sẽ trượt qua toàn bộ các frame. Kết quả cuối cùng sẽ là một ma trận chứa thông tin không gian và thời gian từ video.

Tóm lại: (2 + 1)D convolution xử lý không gian và thời gian một cách riêng biệt, giúp giảm phức tạp tính toán. Ví dụ, bạn áp dụng 2D convolution cho mỗi frame, rồi 1D convolution theo thời gian. 3D convolution kết hợp đồng thời không